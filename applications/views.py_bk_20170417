#-*- coding: utf-8 -*-
from django.shortcuts import render,HttpResponseRedirect,HttpResponse
from django.shortcuts import render_to_response,HttpResponse, redirect,render
from django.contrib.auth import authenticate,login,logout
from django.contrib.auth.decorators import login_required
from hosts import models
from hosts.views import *
import os,json,time
from os.path import splitext
from time import sleep
from hosts.utils import *
from datetime import datetime
def demo(request):
  return render_to_response('applications/demo.html')
def demo_data(request):
  #data=[{"stationId":"CQ11","stationName":"重庆三峡店","stationClass":"2","stationParent":"CQ01","lastModDate":"Feb 3, 2016 2:13:55 PM","lastTransDate":"Jan 4, 2012 4:00:35 PM","localFlag":"0","stockArrearMethod":"1","jhStyle":"0","shortName":"21号仓","isExists":"1","accountClient":"KCQ11JSKH0","accountFactory":"GCQ11JSHY0","inputFlag":"0","isAllowimport":"0","taxratebyproduct":"1","taxratebybusiness":0.0,"taxratebyscale":"1","tjBalancefDiscount":0.0}]
  data=[{"id": 1,"project": "个人加载服务","package": "collt-ntr-loader","subsys": "金融类个人加载子系统","status": "部分启动"},{"id": 0,"project": "个人加载服务","package": "collt-ntr-loader","subsys": "金融类个人加载子系统","status": "部分启动"}]

  #data=[{"Code":"3","TuanGouName":"好多鱼","StartDate":"2016/10/9 10:15:00","EndTime":"2016/12/25 11:30:00"},{"Code":"1","TuanGouName":"好多鱼","StartDate":"2016/10/9 10:15:00","EndTime":"2016/12/25 11:30:00"},{"Code":"2","TuanGouName":"好多鱼","StartDate":"2016/10/9 10:15:00","EndTime":"2016/12/25 11:30:00"}]

  #data=[{"id": 0, "name": "Item 0","price": "$0"}]
  #return HttpResponse(data)
  

  server = models.java_server.objects.all().values('id','name','app_id').order_by('id');
  print server
 
  return HttpResponse(json.dumps(data))

def demo_data_sub(request):
    data=[{"pid": 1234,"path": "/midware/app/01","host": "192.168.1.2","CPU": "0.1 0.2 0.3","status": "Down"},{"pid": 1234,"path": "/midware/app/01","host": "192.168.1.3","CPU": "0.1 0.2 0.3","status": "RUNNING"},{"pid": 1234,"path": "/midware/app/01","host": "192.168.1.4","cpu": "0.1 0.2 0.3","status": "RUNNING"},{"pid": 1234,"path": "/midware/app/01","host": "192.168.1.5","CPU": "0.1 0.2 0.3","status": "Down"}]
    return HttpResponse(json.dumps(data))

@login_required
def app_mgr(request):
    selected_gid = request.GET.get('selected_gid')
    subsys = models.Subsys.objects.all().values('id','name','memo').order_by('id');
    hosts = []                                                                                                                                          
    if selected_gid:
        #app_list = models.App.objects.filter(subsys_id =selected_gid).values('name','memo').order_by('id');
        app_list = models.App.objects.filter(subsys__id = selected_gid).values('id','name','package','path','memo','subsys_id').order_by('id');
        
    else:
        #app_list = models.App.objects.all().values('name','memo').order_by('id');
        app_list = models.App.objects.all().values('id','name','package','path','memo','subsys_id').order_by('id');
    print "================app_list===================",app_list
    for app in app_list:
        app_id = app['id']
        app_name = app['name']
        subsys_id = app['subsys_id']
        print "app_id:",app_id
        print "subsys_id:",subsys_id
        subsys_name = models.Subsys.objects.all().filter(id = subsys_id).distinct().values('name')
        print "subsys_name:",subsys_name
        app_host_id = models.App_host.objects.all().filter(app_id = app_id).distinct().values('host_id')
        print "app_host_id:",app_host_id
        for id in app_host_id:
           app_host_id = id['host_id']
           app_host = models.Host.objects.all().filter(id = app_host_id).distinct().values('ip_addr')
           print "app_host:",app_host
           hosts.append({'app_name':app['name'],'app_package':app['package'],'app_path':app['path'],'subsys_name': subsys_name[0]['name'],'app_host':app_host[0]['ip_addr']})
    #data = {'app_list':app_list}
    print "hosts==",hosts
    return render(request,"applications/app_mgr.html",{'app_list':hosts,'subsys':subsys})

@csrf_exempt
def file_del(request):
	filename = request.POST.get('filename')
        Local_Dir = '/srv/salt/upload'
        print filename
	try:
		r_filename = os.path.join(Local_Dir,filename)
		os.system('rm -rf %s' %r_filename)
		return HttpResponse('%s del success' %filename)
	except Exception as e:
		return HttpResponse('%s del failed,%s' %(filename,e))


#def deploy_info(request):
def deploy_info(request,*args,**kw):
    selected_gid = request.GET.get('selected_gid')
    s = SSH('192.168.91.132','22','root','rootroot')
    path = '/srv/salt/upload'
    data = []
    hosts = []
    server_hosts = {}
    server_list_status = []
    remote_file_list =  s.exec_command_list('ls %s' %path)                                                           
    for file in remote_file_list:                                                                                    
        f = file.strip()                                                                                             
        mtime = time.ctime(os.path.getmtime(path+"/"+f))                                                             
        #print "Last modified : %s" % (mtime)                                                                        
        data.append({'file':file,'mtime':mtime})
    if selected_gid:                                                                                                
        host_list = models.BindHostToUser.objects.filter(host_groups__id =selected_gid)                             
    else:                                                                                                           
        host_list = models.BindHostToUser.objects.all()                      
    admin_info = models.weblogic_admin.objects.all().distinct().values('id','name','console_port','cluster','primary_id').order_by('id');
    for _id in admin_info:
        primary_id = _id['primary_id']
        admin_id = _id['id']
        print "44444444444444444444444",primary_id
        admin_host_ip = models.Host.objects.all().filter(id = primary_id).distinct().values('ip_addr','hostname')
        print "3333333333333333333333333",admin_host_ip
         
        server_id = models.weblogic_admin_serverhost.objects.all().filter(weblogic_admin_id = admin_id).distinct().values('weblogic_server_id')
        print "5555555555555555555555555555",server_id
        serverhost_dic=[]
        for id in server_id:
            server_id = id['weblogic_server_id']
            server_name = models.weblogic_server.objects.all().filter(id = server_id).distinct().values('server_name')
            print "66666666666666666666666666",server_name
            name = server_name[0]                                                                             
            name_values = name.values()                                                                         
            values = ','.join(name_values)                                                                           
            serverhost_dic.append(values)                                                                          
            host_dic = ','.join(serverhost_dic)                                                                     
        server_hosts[admin_id] = host_dic       
        print "7777777777777777777777777",server_hosts
        hosts.append({'hostname':admin_host_ip[0]['hostname'],'ip_addr':admin_host_ip[0]['ip_addr'],'admin_port':_id['console_port'],'cluster_name':_id['cluster'],'server_name':host_dic,'name':_id['name']})
        print "88888888888888888888888888888888",hosts
    server_info = models.weblogic_server.objects.all().distinct().values('server_name','server_port','server_status','managed_server_id_id','apps_id_id','date')
    for server_id in server_info:
        host_id = server_id['managed_server_id_id']
        apps_id = server_id['apps_id_id']
        host_ip =  models.Host.objects.all().filter(id = host_id).distinct().values('ip_addr','hostname')
        print "9999999999999999999999999999999999",host_ip
        ip_addr = host_ip[0]['ip_addr'] 
        app_list = models.App.objects.all().filter(id = apps_id).distinct().values('name','package')
        print "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",app_list
        server_list_status.append({'server_name':server_id['server_name'],'project_name':app_list[0]['name'],'apps_name':app_list[0]['package'],'server_status':server_id['server_status'],'server_date':server_id['date'],'managed_server':host_ip[0]['ip_addr']})
        print "======================server_list_status[]==================",server_list_status
        
    return render(request,"applications/deploy_info.html",locals())


@csrf_exempt
def deploy_run(request):
    
    date = datetime.now()
    year = date.year
    month = date.month
    day = date.day
    Date = '%d-%d-%d'% (year,month,day)

    local_filename = request.POST.get('local_files')
    host_ip_req = request.POST.get('host_ip[]')
    host_name_req = request.POST.get('host_name[]')
    admin_port = request.POST.get('admin_port[]')
    cluster_name = request.POST.get('cluster_name[]')
    vhost_id_req = request.POST.get('host_ip[]', '').split(',')
    #remote_path = request.POST.get('remote_path','')
    jremote_path = "/java/applications" 
    path = "/tmp" 
    app_path = "/midware/applications" 
    bak_path = "/midware/applications_backup" 
    file_name = local_filename.strip()
    files_sp = splitext(file_name)[0]
    upload_path = "/srv/salt/upload"
    print "=================equest.POST=======",request.POST
    
    
    selected_hosts_name = request.POST.getlist("host_name[]")
    saltkey = ','.join(selected_hosts_name)
    selected_hosts_ip = request.POST.getlist("host_ip[]")
    host_ip = ','.join(selected_hosts_ip)
    #upload_files = request.POST.getlist("local_files")
    salt_filename = "salt://upload/"+local_filename
    print "====================================="
    print saltkey
    select_type = request.POST.get('select_type').strip()
    dep_type = request.POST.get('dep_type').strip()
    cmd = ''
    path = "/tmp"
    tmp_path = '%s/apps/%s' %(path,Date)
    f = os.path.exists(tmp_path)                                                                                                                                             
    if f == False:                                                                                                                                                           
       os.system('%s %s' %('mkdir -p',tmp_path)) 

    if select_type == "java":
      print "exc java shell"
      #ret = SALTAPI.remote_noarg_execution1(saltkey,'cp.get_file',jarg)
      sftp2(host_ip,upload_path +"/"+ file_name,'/tmp/applications/java/'+file_name)
      cmd = r'cd /tmp/applications/java;tar xf '+file_name+';cp -Rf '+files_sp+'  /java/applications/'
      ssh2_deploy(host_ip,cmd)
    elif select_type == "weblogic":
      if dep_type == "update":
         print "exc weblogic update shell"
         cmd = r'cd '+app_path+';tar cvf '+bak_path+'/'+files_sp+'_'+Date+'.tar '+files_sp+''
         ssh2_deploy(host_ip,cmd)
      else:
         print "exc weblogic deploy shell"
      sftp2(host_ip,upload_path +"/"+ file_name,tmp_path+"/"+file_name)
      #cmd = r'cd '+app_path+';tar cvf '+bak_path+'/'+files_sp+'.tar-'+Date+' '+files_sp+''
      cmd = r'cd '+tmp_path+';unzip -o -d '+files_sp+' '+file_name+';cp -Rf '+files_sp+'  '+app_path+''
      ssh2_deploy(host_ip,cmd)
      #autodeploy.py 192.168.91.132 8000 helloworld Cluster1 deploy
      cmd_deploy = r'cd /midware/script/weblogic/deploy_all/;sh autodeploy.sh '+host_ip+' '+admin_port+' '+files_sp+' '+cluster_name+' deploy >> deploy.log;'
      ssh2_deploy(host_ip,cmd_deploy)
      while True:
          result = ssh2_deploy(host_ip, r'cd /midware/script/weblogic/deploy_all/;grep completed deploy.log;')
          if (len(result)>0):
              break;
          else:
             sleep(10)
      
      ssh2_deploy(host_ip,r'cd /midware/script/weblogic/deploy_all/;sh my_weblogic.sh stop > stop-server-all.log;')

      while True:
            result = ssh2_deploy(host_ip, r'cd /midware/script/weblogic/deploy_all/;grep stopped stop-server-all.log;')
            if (len(result)>0):
                break;
            else:
                sleep(10)
        
      ssh2_deploy(host_ip,r'cd /midware/script/weblogic/deploy_all/;sh my_weblogic.sh start > start-server-all.log; ')
      while True:
            #result = ssh2_deploy_log(host_ip, r"cd /midware/logs/;awk 'NF{a=$0}END{print a}' "+module+"-?01-srv01-"+(datetime.now().date()).strftime('%Y%m%d')+".log|grep -i RUNNING ;")
            result = ssh2_deploy_log(host_ip, r"cd /midware/logs/;awk 'NF{a=$0}END{print a}' Server-0-"+(datetime.now().date()).strftime('%Y%m%d')+".log|grep -i RUNNING ;")
            if (len(result)>0):
                break;
            else:
                sleep(5) 
    else:
      print "xxxxx"
    return HttpResponse('部署成功!')
    #return render_to_response('applications/deploy_info.html',locals())
@csrf_exempt
def getlog_deploy_log(request):
    
    line_req = request.POST.get('linenumber','1')
    selected_hosts_ip = request.POST.getlist("host_ip[]")
    host_ip = ','.join(selected_hosts_ip)
    logfile_req = '/midware/script/weblogic/deploy_all/deploy.log'
    #result = ssh2_deploy_log(host_ip, r"cd /tmp/applications/java;set a=`wc -l deploy.log | awk '{print $1}'`;echo ${a};sed -n "+str(linenumber)+",${a}p deploy.log")
    #result = ssh2_deploy_log(host_ip, r"cd /tmp/applications/java;set a=`wc -l deploy.log | awk '{print $1}'`;echo ${a};sed -n "+linenumber+",${a}p deploy.log")
    result = ssh2_deploy_log(host_ip, r"line=`wc -l "+logfile_req+"|awk '{print $1}'`;echo ${line};sed -n "+str(line_req)+",${line}p "+logfile_req+"")
    #print result
    print "######################result########################################"                                                                                               
    result = result.split('\n')                                                                                                                                                
    linenumber = int(result[0])                                                                                                                                                
    linetxt = result[1:]
    data = {'linenumber':linenumber,'log':linetxt}
    print data
    return HttpResponse(json.dumps(data,ensure_ascii=False))




@csrf_exempt
def instance_ops(request):
    print "=================equest.POST=======",request.POST
    return HttpResponse("===")
    















